{
  "contract_name": "mars-credit-manager",
  "contract_version": "1.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "allowed_coins",
      "max_close_factor",
      "max_unlocking_positions",
      "oracle",
      "owner",
      "red_bank",
      "swapper",
      "vault_configs",
      "zapper"
    ],
    "properties": {
      "allowed_coins": {
        "description": "Whitelisted coin denoms approved by governance",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "max_close_factor": {
        "description": "The maximum percent a liquidator can decrease the debt amount of the liquidatee",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "max_unlocking_positions": {
        "description": "The maximum number of unlocking positions an account can have simultaneously Note: As health checking requires looping through each, this number must not be too large. If so, having too many could prevent the account from being liquidated due to gas constraints.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "oracle": {
        "description": "The Mars Protocol oracle contract. We read prices of assets here.",
        "allOf": [
          {
            "$ref": "#/definitions/OracleBase_for_String"
          }
        ]
      },
      "owner": {
        "description": "The address with privileged access to update config",
        "type": "string"
      },
      "red_bank": {
        "description": "The Mars Protocol money market contract where we borrow assets from",
        "allOf": [
          {
            "$ref": "#/definitions/RedBankBase_for_String"
          }
        ]
      },
      "swapper": {
        "description": "Helper contract for making swaps",
        "allOf": [
          {
            "$ref": "#/definitions/SwapperBase_for_String"
          }
        ]
      },
      "vault_configs": {
        "description": "Vaults approved by governance that implement credit manager's vault interface Includes a deposit cap that enforces a TLV limit for risk mitigation",
        "type": "array",
        "items": {
          "$ref": "#/definitions/VaultInstantiateConfig"
        }
      },
      "zapper": {
        "description": "Helper contract for adding/removing liquidity",
        "allOf": [
          {
            "$ref": "#/definitions/ZapperBase_for_String"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "OracleBase_for_String": {
        "type": "string"
      },
      "RedBankBase_for_String": {
        "type": "string"
      },
      "SwapperBase_for_String": {
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VaultBase_for_String": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VaultConfig": {
        "type": "object",
        "required": [
          "deposit_cap",
          "liquidation_threshold",
          "max_ltv",
          "whitelisted"
        ],
        "properties": {
          "deposit_cap": {
            "$ref": "#/definitions/Coin"
          },
          "liquidation_threshold": {
            "$ref": "#/definitions/Decimal"
          },
          "max_ltv": {
            "$ref": "#/definitions/Decimal"
          },
          "whitelisted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "VaultInstantiateConfig": {
        "type": "object",
        "required": [
          "config",
          "vault"
        ],
        "properties": {
          "config": {
            "$ref": "#/definitions/VaultConfig"
          },
          "vault": {
            "$ref": "#/definitions/VaultBase_for_String"
          }
        },
        "additionalProperties": false
      },
      "ZapperBase_for_String": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Mints NFT representing a credit account for user. User can have many.",
        "type": "object",
        "required": [
          "create_credit_account"
        ],
        "properties": {
          "create_credit_account": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update user's position on their credit account",
        "type": "object",
        "required": [
          "update_credit_account"
        ],
        "properties": {
          "update_credit_account": {
            "type": "object",
            "required": [
              "account_id",
              "actions"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Action"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update contract config constants",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "updates"
            ],
            "properties": {
              "updates": {
                "$ref": "#/definitions/ConfigUpdates"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Emergency owner has a narrow amount of config changes it is allowed to do: - Lower maxLTV of vault to zero - Lower deposit cap of vault to zero - Remove asset from ALLOWED_COINS list. This has a second order consequence disallowing of that coin: - Borrow - Deposit - Swap into - Zap with/into - Unzap into Coin would still be allowed to: - Withdraw - Swap out of - Repay loan of",
        "type": "object",
        "required": [
          "emergency_config_update"
        ],
        "properties": {
          "emergency_config_update": {
            "$ref": "#/definitions/EmergencyUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Manages owner role state",
        "type": "object",
        "required": [
          "update_owner"
        ],
        "properties": {
          "update_owner": {
            "$ref": "#/definitions/OwnerUpdate"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update nft contract config",
        "type": "object",
        "required": [
          "update_nft_config"
        ],
        "properties": {
          "update_nft_config": {
            "type": "object",
            "required": [
              "updates"
            ],
            "properties": {
              "updates": {
                "$ref": "#/definitions/NftConfigUpdates"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Internal actions only callable by the contract itself",
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "The list of actions that users can perform on their positions",
        "oneOf": [
          {
            "description": "Deposit coin of specified denom and amount. Verifies if the correct amount is sent with transaction.",
            "type": "object",
            "required": [
              "deposit"
            ],
            "properties": {
              "deposit": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw coin of specified denom and amount",
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Borrow coin of specified amount from Red Bank",
            "type": "object",
            "required": [
              "borrow"
            ],
            "properties": {
              "borrow": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Repay coin of specified amount back to Red Bank. If `amount: AccountBalance` is passed, the repaid amount will be the minimum between account balance for denom and total owed.",
            "type": "object",
            "required": [
              "repay"
            ],
            "properties": {
              "repay": {
                "$ref": "#/definitions/ActionCoin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Deposit coins into vault strategy If `coin.amount: AccountBalance`, Rover attempts to deposit the account's entire balance into the vault",
            "type": "object",
            "required": [
              "enter_vault"
            ],
            "properties": {
              "enter_vault": {
                "type": "object",
                "required": [
                  "coin",
                  "vault"
                ],
                "properties": {
                  "coin": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw underlying coins from vault",
            "type": "object",
            "required": [
              "exit_vault"
            ],
            "properties": {
              "exit_vault": {
                "type": "object",
                "required": [
                  "amount",
                  "vault"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Requests unlocking of shares for a vault with a required lock period",
            "type": "object",
            "required": [
              "request_vault_unlock"
            ],
            "properties": {
              "request_vault_unlock": {
                "type": "object",
                "required": [
                  "amount",
                  "vault"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraws the assets for unlocking position id from vault. Required time must have elapsed.",
            "type": "object",
            "required": [
              "exit_vault_unlocked"
            ],
            "properties": {
              "exit_vault_unlocked": {
                "type": "object",
                "required": [
                  "id",
                  "vault"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debt of a liquidatable rover account for a bonus. Requires specifying 1) the debt denom/amount of what the liquidator wants to payoff and 2) the request coin denom which the liquidatee should have a balance of. The amount returned to liquidator will be the request coin of the amount that precisely matches the value of the debt + a liquidation bonus. The debt amount will be adjusted down if: - Exceeds liquidatee's total debt for denom - Not enough liquidatee request coin balance to match - The value of the debt repaid exceeds the maximum close factor %",
            "type": "object",
            "required": [
              "liquidate_coin"
            ],
            "properties": {
              "liquidate_coin": {
                "type": "object",
                "required": [
                  "debt_coin",
                  "liquidatee_account_id",
                  "request_coin_denom"
                ],
                "properties": {
                  "debt_coin": {
                    "description": "The coin debt that the liquidator wishes to pay back on behalf of the liquidatee. The liquidator must already have these assets in their credit account.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  },
                  "liquidatee_account_id": {
                    "description": "The credit account id of the one with a liquidation threshold health factor 1 or below",
                    "type": "string"
                  },
                  "request_coin_denom": {
                    "description": "The coin they wish to acquire from the liquidatee (amount returned will include the bonus)",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debt of a liquidatable rover account for a via liquidating a vault position. Similar to LiquidateCoin {} msg and will make similar adjustments to the request. The vault position will be withdrawn (and force withdrawn if a locked vault position) and the underlying assets will transferred to the liquidator. The `VaultPositionType` will determine which bucket to liquidate from.",
            "type": "object",
            "required": [
              "liquidate_vault"
            ],
            "properties": {
              "liquidate_vault": {
                "type": "object",
                "required": [
                  "debt_coin",
                  "liquidatee_account_id",
                  "position_type",
                  "request_vault"
                ],
                "properties": {
                  "debt_coin": {
                    "$ref": "#/definitions/Coin"
                  },
                  "liquidatee_account_id": {
                    "type": "string"
                  },
                  "position_type": {
                    "$ref": "#/definitions/VaultPositionType"
                  },
                  "request_vault": {
                    "$ref": "#/definitions/VaultBase_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Perform a swapper with an exact-in amount. Requires slippage allowance %. If `coin_in.amount: AccountBalance`, the accounts entire balance of `coin_in.denom` will be used.",
            "type": "object",
            "required": [
              "swap_exact_in"
            ],
            "properties": {
              "swap_exact_in": {
                "type": "object",
                "required": [
                  "coin_in",
                  "denom_out",
                  "slippage"
                ],
                "properties": {
                  "coin_in": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "denom_out": {
                    "type": "string"
                  },
                  "slippage": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Add Vec<Coin> to liquidity pool in exchange for LP tokens",
            "type": "object",
            "required": [
              "provide_liquidity"
            ],
            "properties": {
              "provide_liquidity": {
                "type": "object",
                "required": [
                  "coins_in",
                  "lp_token_out",
                  "minimum_receive"
                ],
                "properties": {
                  "coins_in": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ActionCoin"
                    }
                  },
                  "lp_token_out": {
                    "type": "string"
                  },
                  "minimum_receive": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Send LP token and withdraw corresponding reserve assets from pool. If `lp_token.amount: AccountBalance`, the account balance of `lp_token.denom` will be used.",
            "type": "object",
            "required": [
              "withdraw_liquidity"
            ],
            "properties": {
              "withdraw_liquidity": {
                "type": "object",
                "required": [
                  "lp_token"
                ],
                "properties": {
                  "lp_token": {
                    "$ref": "#/definitions/ActionCoin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Refunds all coin balances back to user wallet",
            "type": "object",
            "required": [
              "refund_all_coin_balances"
            ],
            "properties": {
              "refund_all_coin_balances": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionAmount": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "account_balance"
            ]
          },
          {
            "type": "object",
            "required": [
              "exact"
            ],
            "properties": {
              "exact": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionCoin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/ActionAmount"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "CallbackMsg": {
        "description": "Internal actions made by the contract with pre-validated inputs",
        "oneOf": [
          {
            "description": "Withdraw specified amount of coin from credit account; Decrement the token's asset amount;",
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "type": "object",
                "required": [
                  "account_id",
                  "coin",
                  "recipient"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "coin": {
                    "$ref": "#/definitions/Coin"
                  },
                  "recipient": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Borrow specified amount of coin from Red Bank; Increase the token's coin amount and debt shares;",
            "type": "object",
            "required": [
              "borrow"
            ],
            "properties": {
              "borrow": {
                "type": "object",
                "required": [
                  "account_id",
                  "coin"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "coin": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Repay coin of specified amount back to Red Bank; Decrement the token's coin amount and debt shares; If `coin.amount: AccountBalance` is passed, the repaid amount will be the minimum between account balance for denom and total owed;",
            "type": "object",
            "required": [
              "repay"
            ],
            "properties": {
              "repay": {
                "type": "object",
                "required": [
                  "account_id",
                  "coin"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "coin": {
                    "$ref": "#/definitions/ActionCoin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Assert MaxLTV is either: - Healthy, if prior to actions MaxLTV health factor >= 1 or None - Not further weakened, if prior to actions MaxLTV health factor < 1 Emits a `position_changed` event.",
            "type": "object",
            "required": [
              "assert_max_ltv"
            ],
            "properties": {
              "assert_max_ltv": {
                "type": "object",
                "required": [
                  "account_id",
                  "prev_health"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "prev_health": {
                    "$ref": "#/definitions/Health"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Adds coin to a vault strategy",
            "type": "object",
            "required": [
              "enter_vault"
            ],
            "properties": {
              "enter_vault": {
                "type": "object",
                "required": [
                  "account_id",
                  "coin",
                  "vault"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "coin": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Exchanges vault LP shares for assets",
            "type": "object",
            "required": [
              "exit_vault"
            ],
            "properties": {
              "exit_vault": {
                "type": "object",
                "required": [
                  "account_id",
                  "amount",
                  "vault"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Used to update the account balance of vault coins after a vault action has taken place",
            "type": "object",
            "required": [
              "update_vault_coin_balance"
            ],
            "properties": {
              "update_vault_coin_balance": {
                "type": "object",
                "required": [
                  "account_id",
                  "previous_total_balance",
                  "vault"
                ],
                "properties": {
                  "account_id": {
                    "description": "Account that needs vault coin balance adjustment",
                    "type": "string"
                  },
                  "previous_total_balance": {
                    "description": "Total vault coin balance in Rover",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Requests unlocking of shares for a vault with a lock period",
            "type": "object",
            "required": [
              "request_vault_unlock"
            ],
            "properties": {
              "request_vault_unlock": {
                "type": "object",
                "required": [
                  "account_id",
                  "amount",
                  "vault"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraws assets from vault for a locked position having a lockup period that has been fulfilled",
            "type": "object",
            "required": [
              "exit_vault_unlocked"
            ],
            "properties": {
              "exit_vault_unlocked": {
                "type": "object",
                "required": [
                  "account_id",
                  "position_id",
                  "vault"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "position_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vault": {
                    "$ref": "#/definitions/VaultBase_for_Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay back debts of a liquidatable rover account for a bonus",
            "type": "object",
            "required": [
              "liquidate_coin"
            ],
            "properties": {
              "liquidate_coin": {
                "type": "object",
                "required": [
                  "debt_coin",
                  "liquidatee_account_id",
                  "liquidator_account_id",
                  "request_coin_denom"
                ],
                "properties": {
                  "debt_coin": {
                    "$ref": "#/definitions/Coin"
                  },
                  "liquidatee_account_id": {
                    "type": "string"
                  },
                  "liquidator_account_id": {
                    "type": "string"
                  },
                  "request_coin_denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "liquidate_vault"
            ],
            "properties": {
              "liquidate_vault": {
                "type": "object",
                "required": [
                  "debt_coin",
                  "liquidatee_account_id",
                  "liquidator_account_id",
                  "position_type",
                  "request_vault"
                ],
                "properties": {
                  "debt_coin": {
                    "$ref": "#/definitions/Coin"
                  },
                  "liquidatee_account_id": {
                    "type": "string"
                  },
                  "liquidator_account_id": {
                    "type": "string"
                  },
                  "position_type": {
                    "$ref": "#/definitions/VaultPositionType"
                  },
                  "request_vault": {
                    "$ref": "#/definitions/VaultBase_for_Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Perform a swapper with an exact-in amount. Requires slippage allowance %. If `coin_in.amount: AccountBalance`, the accounts entire balance of `coin_in.denom` will be used.",
            "type": "object",
            "required": [
              "swap_exact_in"
            ],
            "properties": {
              "swap_exact_in": {
                "type": "object",
                "required": [
                  "account_id",
                  "coin_in",
                  "denom_out",
                  "slippage"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "coin_in": {
                    "$ref": "#/definitions/ActionCoin"
                  },
                  "denom_out": {
                    "type": "string"
                  },
                  "slippage": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Used to update the coin balance of account after an async action",
            "type": "object",
            "required": [
              "update_coin_balance"
            ],
            "properties": {
              "update_coin_balance": {
                "type": "object",
                "required": [
                  "account_id",
                  "previous_balance"
                ],
                "properties": {
                  "account_id": {
                    "description": "Account that needs coin balance adjustment",
                    "type": "string"
                  },
                  "previous_balance": {
                    "description": "Total balance for coin in Rover prior to withdraw",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Add Vec<Coin> to liquidity pool in exchange for LP tokens",
            "type": "object",
            "required": [
              "provide_liquidity"
            ],
            "properties": {
              "provide_liquidity": {
                "type": "object",
                "required": [
                  "account_id",
                  "coins_in",
                  "lp_token_out",
                  "minimum_receive"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "coins_in": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ActionCoin"
                    }
                  },
                  "lp_token_out": {
                    "type": "string"
                  },
                  "minimum_receive": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Send LP token and withdraw corresponding reserve assets from pool. If `lp_token.amount: AccountBalance`, the account balance of `lp_token.denom` will be used.",
            "type": "object",
            "required": [
              "withdraw_liquidity"
            ],
            "properties": {
              "withdraw_liquidity": {
                "type": "object",
                "required": [
                  "account_id",
                  "lp_token"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "lp_token": {
                    "$ref": "#/definitions/ActionCoin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Checks to ensure only one vault position is taken per credit account",
            "type": "object",
            "required": [
              "assert_one_vault_position_only"
            ],
            "properties": {
              "assert_one_vault_position_only": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Refunds all coin balances back to user wallet",
            "type": "object",
            "required": [
              "refund_all_coin_balances"
            ],
            "properties": {
              "refund_all_coin_balances": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "ConfigUpdates": {
        "description": "Used when you want to update fields on Instantiate config",
        "type": "object",
        "properties": {
          "account_nft": {
            "type": [
              "string",
              "null"
            ]
          },
          "allowed_coins": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "max_close_factor": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "max_unlocking_positions": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "oracle": {
            "anyOf": [
              {
                "$ref": "#/definitions/OracleBase_for_String"
              },
              {
                "type": "null"
              }
            ]
          },
          "swapper": {
            "anyOf": [
              {
                "$ref": "#/definitions/SwapperBase_for_String"
              },
              {
                "type": "null"
              }
            ]
          },
          "vault_configs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/VaultInstantiateConfig"
            }
          },
          "zapper": {
            "anyOf": [
              {
                "$ref": "#/definitions/ZapperBase_for_String"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "EmergencyUpdate": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set_zero_max_ltv"
            ],
            "properties": {
              "set_zero_max_ltv": {
                "$ref": "#/definitions/VaultBase_for_String"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "set_zero_deposit_cap"
            ],
            "properties": {
              "set_zero_deposit_cap": {
                "$ref": "#/definitions/VaultBase_for_String"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "disallow_coin"
            ],
            "properties": {
              "disallow_coin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Health": {
        "type": "object",
        "required": [
          "liquidation_threshold_adjusted_collateral",
          "max_ltv_adjusted_collateral",
          "total_collateral_value",
          "total_debt_value"
        ],
        "properties": {
          "liquidation_health_factor": {
            "description": "The sum of the value of all collaterals multiplied by their liquidation threshold over the total value of debt",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "liquidation_threshold_adjusted_collateral": {
            "description": "The sum of the value of all colletarals adjusted by their Liquidation Threshold",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "max_ltv_adjusted_collateral": {
            "description": "The sum of the value of all colletarals adjusted by their Max LTV",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "max_ltv_health_factor": {
            "description": "The sum of the value of all collaterals multiplied by their max LTV, over the total value of debt",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "total_collateral_value": {
            "description": "The sum of the value of all collaterals",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "total_debt_value": {
            "description": "The sum of the value of all debts",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "NftConfigUpdates": {
        "type": "object",
        "properties": {
          "max_value_for_burn": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "proposed_new_minter": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "OracleBase_for_String": {
        "type": "string"
      },
      "OwnerUpdate": {
        "oneOf": [
          {
            "description": "Proposes a new owner to take role. Only current owner can execute.",
            "type": "object",
            "required": [
              "propose_new_owner"
            ],
            "properties": {
              "propose_new_owner": {
                "type": "object",
                "required": [
                  "proposed"
                ],
                "properties": {
                  "proposed": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the currently proposed owner. Only current owner can execute.",
            "type": "string",
            "enum": [
              "clear_proposed"
            ]
          },
          {
            "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
            "type": "string",
            "enum": [
              "accept_proposed"
            ]
          },
          {
            "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
            "type": "string",
            "enum": [
              "abolish_owner_role"
            ]
          },
          {
            "description": "A separate entity managed by Owner that can be used for granting specific emergency powers.",
            "type": "object",
            "required": [
              "set_emergency_owner"
            ],
            "properties": {
              "set_emergency_owner": {
                "type": "object",
                "required": [
                  "emergency_owner"
                ],
                "properties": {
                  "emergency_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Remove the entity in the Emergency Owner role",
            "type": "string",
            "enum": [
              "clear_emergency_owner"
            ]
          }
        ]
      },
      "SwapperBase_for_String": {
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VaultBase_for_Addr": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "VaultBase_for_String": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VaultConfig": {
        "type": "object",
        "required": [
          "deposit_cap",
          "liquidation_threshold",
          "max_ltv",
          "whitelisted"
        ],
        "properties": {
          "deposit_cap": {
            "$ref": "#/definitions/Coin"
          },
          "liquidation_threshold": {
            "$ref": "#/definitions/Decimal"
          },
          "max_ltv": {
            "$ref": "#/definitions/Decimal"
          },
          "whitelisted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "VaultInstantiateConfig": {
        "type": "object",
        "required": [
          "config",
          "vault"
        ],
        "properties": {
          "config": {
            "$ref": "#/definitions/VaultConfig"
          },
          "vault": {
            "$ref": "#/definitions/VaultBase_for_String"
          }
        },
        "additionalProperties": false
      },
      "VaultPositionType": {
        "type": "string",
        "enum": [
          "u_n_l_o_c_k_e_d",
          "l_o_c_k_e_d",
          "u_n_l_o_c_k_i_n_g"
        ]
      },
      "ZapperBase_for_String": {
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Rover contract-level config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Configs & deposit caps on vaults",
        "type": "object",
        "required": [
          "vaults_info"
        ],
        "properties": {
          "vaults_info": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/VaultBase_for_String"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Whitelisted coins",
        "type": "object",
        "required": [
          "allowed_coins"
        ],
        "properties": {
          "allowed_coins": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All positions represented by token with value",
        "type": "object",
        "required": [
          "positions"
        ],
        "properties": {
          "positions": {
            "type": "object",
            "required": [
              "account_id"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The health of the account represented by token",
        "type": "object",
        "required": [
          "health"
        ],
        "properties": {
          "health": {
            "type": "object",
            "required": [
              "account_id"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate coin balances for all token positions; start_after accepts (account_id, denom)",
        "type": "object",
        "required": [
          "all_coin_balances"
        ],
        "properties": {
          "all_coin_balances": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate debt shares for all token positions; start_after accepts (account_id, denom)",
        "type": "object",
        "required": [
          "all_debt_shares"
        ],
        "properties": {
          "all_debt_shares": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Total debt shares issued for Coin",
        "type": "object",
        "required": [
          "total_debt_shares"
        ],
        "properties": {
          "total_debt_shares": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate total debt shares for all supported coins; start_after accepts denom string",
        "type": "object",
        "required": [
          "all_total_debt_shares"
        ],
        "properties": {
          "all_total_debt_shares": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all vault positions; start_after accepts (account_id, addr)",
        "type": "object",
        "required": [
          "all_vault_positions"
        ],
        "properties": {
          "all_vault_positions": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get total vault coin balance in Rover for vault",
        "type": "object",
        "required": [
          "total_vault_coin_balance"
        ],
        "properties": {
          "total_vault_coin_balance": {
            "type": "object",
            "required": [
              "vault"
            ],
            "properties": {
              "vault": {
                "$ref": "#/definitions/VaultBase_for_String"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all total vault coin balances; start_after accepts vault addr",
        "type": "object",
        "required": [
          "all_total_vault_coin_balances"
        ],
        "properties": {
          "all_total_vault_coin_balances": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/VaultBase_for_String"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Estimate how many LP tokens received in exchange for coins provided for liquidity",
        "type": "object",
        "required": [
          "estimate_provide_liquidity"
        ],
        "properties": {
          "estimate_provide_liquidity": {
            "type": "object",
            "required": [
              "coins_in",
              "lp_token_out"
            ],
            "properties": {
              "coins_in": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "lp_token_out": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Estimate coins withdrawn if exchanged for LP tokens",
        "type": "object",
        "required": [
          "estimate_withdraw_liquidity"
        ],
        "properties": {
          "estimate_withdraw_liquidity": {
            "type": "object",
            "required": [
              "lp_token"
            ],
            "properties": {
              "lp_token": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VaultBase_for_String": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_coin_balances": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_CoinBalanceResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/CoinBalanceResponseItem"
      },
      "definitions": {
        "CoinBalanceResponseItem": {
          "type": "object",
          "required": [
            "account_id",
            "amount",
            "denom"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_debt_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_SharesResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SharesResponseItem"
      },
      "definitions": {
        "SharesResponseItem": {
          "type": "object",
          "required": [
            "account_id",
            "denom",
            "shares"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            },
            "shares": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_total_debt_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_DebtShares",
      "type": "array",
      "items": {
        "$ref": "#/definitions/DebtShares"
      },
      "definitions": {
        "DebtShares": {
          "type": "object",
          "required": [
            "denom",
            "shares"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "shares": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_total_vault_coin_balances": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_VaultWithBalance",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VaultWithBalance"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VaultBase_for_Addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultWithBalance": {
          "type": "object",
          "required": [
            "balance",
            "vault"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Uint128"
            },
            "vault": {
              "$ref": "#/definitions/VaultBase_for_Addr"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "all_vault_positions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_VaultPositionResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VaultPositionResponseItem"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "LockingVaultAmount": {
          "type": "object",
          "required": [
            "locked",
            "unlocking"
          ],
          "properties": {
            "locked": {
              "$ref": "#/definitions/VaultAmount"
            },
            "unlocking": {
              "$ref": "#/definitions/UnlockingPositions"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnlockingPositions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultUnlockingPosition"
          }
        },
        "VaultAmount": {
          "$ref": "#/definitions/Uint128"
        },
        "VaultBase_for_Addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPosition": {
          "type": "object",
          "required": [
            "amount",
            "vault"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/VaultPositionAmount"
            },
            "vault": {
              "$ref": "#/definitions/VaultBase_for_Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPositionAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "unlocked"
              ],
              "properties": {
                "unlocked": {
                  "$ref": "#/definitions/VaultAmount"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "locking"
              ],
              "properties": {
                "locking": {
                  "$ref": "#/definitions/LockingVaultAmount"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "VaultPositionResponseItem": {
          "type": "object",
          "required": [
            "account_id",
            "position"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "position": {
              "$ref": "#/definitions/VaultPosition"
            }
          },
          "additionalProperties": false
        },
        "VaultUnlockingPosition": {
          "type": "object",
          "required": [
            "coin",
            "id"
          ],
          "properties": {
            "coin": {
              "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "id": {
              "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "allowed_coins": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_String",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "max_close_factor",
        "max_unlocking_positions",
        "oracle",
        "ownership",
        "red_bank",
        "swapper",
        "zapper"
      ],
      "properties": {
        "account_nft": {
          "type": [
            "string",
            "null"
          ]
        },
        "max_close_factor": {
          "$ref": "#/definitions/Decimal"
        },
        "max_unlocking_positions": {
          "$ref": "#/definitions/Uint128"
        },
        "oracle": {
          "type": "string"
        },
        "ownership": {
          "$ref": "#/definitions/OwnerResponse"
        },
        "red_bank": {
          "type": "string"
        },
        "swapper": {
          "type": "string"
        },
        "zapper": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "OwnerResponse": {
          "description": "Returned from Owner.query()",
          "type": "object",
          "required": [
            "abolished",
            "initialized"
          ],
          "properties": {
            "abolished": {
              "type": "boolean"
            },
            "emergency_owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "initialized": {
              "type": "boolean"
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "proposed": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "estimate_provide_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "estimate_withdraw_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Coin",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "health": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HealthResponse",
      "type": "object",
      "required": [
        "above_max_ltv",
        "liquidatable",
        "liquidation_threshold_adjusted_collateral",
        "max_ltv_adjusted_collateral",
        "total_collateral_value",
        "total_debt_value"
      ],
      "properties": {
        "above_max_ltv": {
          "type": "boolean"
        },
        "liquidatable": {
          "type": "boolean"
        },
        "liquidation_health_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidation_threshold_adjusted_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "max_ltv_adjusted_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "max_ltv_health_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "total_collateral_value": {
          "$ref": "#/definitions/Uint128"
        },
        "total_debt_value": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "positions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Positions",
      "type": "object",
      "required": [
        "account_id",
        "debts",
        "deposits",
        "vaults"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "debts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DebtAmount"
          }
        },
        "deposits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultPosition"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "DebtAmount": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "shares"
          ],
          "properties": {
            "amount": {
              "description": "amount of coins",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "type": "string"
            },
            "shares": {
              "description": "number of shares in debt pool",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "LockingVaultAmount": {
          "type": "object",
          "required": [
            "locked",
            "unlocking"
          ],
          "properties": {
            "locked": {
              "$ref": "#/definitions/VaultAmount"
            },
            "unlocking": {
              "$ref": "#/definitions/UnlockingPositions"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnlockingPositions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultUnlockingPosition"
          }
        },
        "VaultAmount": {
          "$ref": "#/definitions/Uint128"
        },
        "VaultBase_for_Addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPosition": {
          "type": "object",
          "required": [
            "amount",
            "vault"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/VaultPositionAmount"
            },
            "vault": {
              "$ref": "#/definitions/VaultBase_for_Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPositionAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "unlocked"
              ],
              "properties": {
                "unlocked": {
                  "$ref": "#/definitions/VaultAmount"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "locking"
              ],
              "properties": {
                "locking": {
                  "$ref": "#/definitions/LockingVaultAmount"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "VaultUnlockingPosition": {
          "type": "object",
          "required": [
            "coin",
            "id"
          ],
          "properties": {
            "coin": {
              "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "id": {
              "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "total_debt_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DebtShares",
      "type": "object",
      "required": [
        "denom",
        "shares"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "shares": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_vault_coin_balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "vaults_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_VaultInfoResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VaultInfoResponse"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VaultBase_for_String": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "VaultConfig": {
          "type": "object",
          "required": [
            "deposit_cap",
            "liquidation_threshold",
            "max_ltv",
            "whitelisted"
          ],
          "properties": {
            "deposit_cap": {
              "$ref": "#/definitions/Coin"
            },
            "liquidation_threshold": {
              "$ref": "#/definitions/Decimal"
            },
            "max_ltv": {
              "$ref": "#/definitions/Decimal"
            },
            "whitelisted": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "VaultInfoResponse": {
          "type": "object",
          "required": [
            "config",
            "utilization",
            "vault"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/VaultConfig"
            },
            "utilization": {
              "description": "The amount the vault has been utilized, denominated in the same denom set in the vault config's deposit cap",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "vault": {
              "$ref": "#/definitions/VaultBase_for_String"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
